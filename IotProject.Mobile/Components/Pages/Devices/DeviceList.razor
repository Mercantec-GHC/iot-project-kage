@page "/devices"
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<MudFab Class="fab-be" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Href="/devices/add" Label="Add new" />

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4">Devices</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudButton Class="align-self-center" Disabled="@loading" OnClick="FetchDevices" Variant="Variant.Text">
                @if (loading)
                {
                    <MudText Class="me-2">Refreshing</MudText>
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                }
                else
                {
                    <MudText Class="me-2">Refresh</MudText>
                    <MudIcon Class="ms-n1" Icon="@Icons.Material.Filled.Refresh"></MudIcon>
                }
            </MudButton>
        </CardHeaderActions>
    </MudCardHeader>
    <MudDivider />
    @if (loading)
    {
        <MudProgressLinear Color="Color.Info" Indeterminate="true" />
    }
    else if (devices.Any())
    {
        <MudDataGrid T="DeviceResponse" Hover="true" Breakpoint="Breakpoint.Xs" Items="@devices" RowsPerPage="5" Bordered="true" RowClick="@((e) => {OnRowClicked(e.Item);})">
            <Columns>
                <PropertyColumn Property="d => d.Name" Title="Name" />
                <PropertyColumn Property="d => d.Type" Title="Type" />
                <TemplateColumn T="DeviceResponse" Title="Status" >
                    <CellTemplate >
                        @{
                            var online = IsDeviceOnline(context.Item);
                            var text = online ? "Online" : "Offline";
                            var color = online ? Color.Success : Color.Error;

                            <MudChip Color="@color" Size="Size.Small">@text</MudChip>
                        }
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="DeviceResponse" PageSizeOptions=@(new int[] {5, 10, 20}) />
            </PagerContent>
        </MudDataGrid>
    }
    else
    {
        <MudCardContent>
            <p>No devices were found.</p>
        </MudCardContent>
    }

</MudCard>

@code {
    private List<DeviceResponse> devices = new();
    private bool loading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FetchDevices();
        }
    }

    private async Task FetchDevices()
    {
        loading = true;
        devices = await ApiService.GetAllDevices();
        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    private void OnRowClicked(DeviceResponse device)
    {
        NavigationManager.NavigateTo($"device/{device.Id}");
    }

    // Check if a device is online based on last update time
    private bool IsDeviceOnline(DeviceResponse device)
    {
        if (device.LastUpdate == null) return false;
        return (DateTime.UtcNow - device.LastUpdate.Value).TotalHours <= 24;
    }
}