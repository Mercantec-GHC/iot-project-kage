@inherits LayoutComponentBase

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudBreakpointProvider OnBreakpointChanged="OnBreakpointChanged" />

<MudLayout>

    <AuthorizeView>
        <Authorized>
            <MudAppBar Elevation="1" Dense="true">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
                <MudSpacer />
                <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/Mercantec-GHC/iot-project-kage" Target="_blank" />
            </MudAppBar>
            <MudDrawer @bind-Open="@_open" Elevation="1" Variant="_drawerVariant" ClipMode="DrawerClipMode.Docked" Breakpoint="Breakpoint.Sm">
                <NavMenu />
            </MudDrawer>
        </Authorized>
    </AuthorizeView>
    
    <AuthorizeView>
        <Authorized>
            <MudMainContent Class="pt-12">
                <MudContainer Class="my-6">
                    @Body
                </MudContainer>
            </MudMainContent>
        </Authorized>
        <NotAuthorized>
            <MudMainContent Class="pt-0">
                <MudContainer>
                    <div style="height: 100vh; display: flex; align-items: center; justify-content: center;">
                        @Body
                    </div>
                </MudContainer>
            </MudMainContent>
        </NotAuthorized>
    </AuthorizeView>

</MudLayout>

@code {
    private bool _open = false;

    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider;
    private DrawerVariant _drawerVariant = DrawerVariant.Mini;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private void ToggleDrawer()
    {
        _open = !_open;
    }

    private void OnBreakpointChanged(Breakpoint breakpoint)
    {
        // _open = (breakpoint >= Breakpoint.Sm);
        _drawerVariant = breakpoint >= Breakpoint.Sm ? DrawerVariant.Mini : DrawerVariant.Temporary;
        StateHasChanged();
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }
}