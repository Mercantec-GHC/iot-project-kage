@page "/rooms"
@inject ApiService ApiService
@inject NavigationManager navigationManager
@inject IDialogService DialogService

<MudFab Class="fab-be" OnClick="OpenAddDialogAsync" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Label="Add new" />

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4">Rooms</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudButton Class="align-self-center" Disabled="@isLoadingRooms" OnClick="FetchRooms" Variant="Variant.Text">
                @if (isLoadingRooms)
                {
                    <MudText Class="me-2">Refreshing</MudText>
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                }
                else
                {
                    <MudText Class="me-2">Refresh</MudText>
                    <MudIcon Class="ms-n1" Icon="@Icons.Material.Filled.Refresh"></MudIcon>
                }
            </MudButton>
        </CardHeaderActions>
    </MudCardHeader>
    <MudDivider />
    @if (isLoadingRooms)
    {
        <MudProgressLinear Color="Color.Info" Indeterminate="true" />
    }
    else
    {
        <MudCardContent>
            <MudGrid>
                @foreach (var room in rooms)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                        <a href="@($"room/{room.Id}")">
                            <MudCard Class="overflow-hidden" Outlined="true">
                                <div class="ratio ratio-16x9">
                                    <img src="@($"{ApiService.GetImageUrl(room.Id)}?no-cache={DateTimeOffset.UtcNow.ToUnixTimeSeconds()}")" alt="Room Image" class="img-fluid w-100" style="height: 100%; object-fit: cover;" />
                                </div>
                                <MudDivider />
                                <MudCardHeader Class="pb-2 pt-1">
                                    <MudText Class="title-clamp" Typo="Typo.h6">@room.Name</MudText>
                                </MudCardHeader>
                                <MudDivider />
                                <MudCardContent>
                                    <MudText Class="description-clamp" Typo="Typo.body1">@room.Description</MudText>
                                </MudCardContent>
                            </MudCard>
                        </a>
                    </MudItem>
                }
            </MudGrid>
        </MudCardContent>
    }
</MudCard>

@code {
    private List<RoomGetResponse> rooms = new();
    private RoomUpdateRequest? newRoom = new();

    DialogOptions dialogOptions = new DialogOptions
    {
        BackdropClick = false,
        MaxWidth = MaxWidth.ExtraSmall,
        FullWidth = true
    };
    private bool isLoadingRooms = true;

    protected async override Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            await FetchRooms();
        }
    }

    private async Task FetchRooms()
    {
        isLoadingRooms = true;
        rooms = await ApiService.GetAllRooms();
        isLoadingRooms = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OpenAddDialogAsync()
    {
        var dialogReference = await DialogService.ShowAsync<AddDialog>("Add Room", dialogOptions);
        var dialogResult = await dialogReference.Result;
        if (!dialogResult!.Canceled)
        {
            rooms = await ApiService.GetAllRooms();
            await InvokeAsync(StateHasChanged);
        }
    }
}