@page "/room/{RoomId}"
@inject RoomService roomService
@inject NavigationManager navigationManager
@inject IotDeviceService deviceService
@inject IDialogService DialogService

<InputFile id="room_image_input" class="d-none" onchange="UploadFiles" />

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4">Room Details</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudMenu Icon="@Icons.Material.Filled.Settings"
            Color="Color.Default"
            AriaLabel="Open settings menu" @ref="menu">
                <MudMenuItem Label="Edit Room" OnClick="OpenEditDialogAsync" />
                <div class="mud-menu-item mud-ripple mud-list-item-clickable">
                    <label for="room_image_input" class="mud-typography mud-typography-body1 mud-menu-item-text cursor-pointer">Change Image</label>
                </div>
                <MudMenuItem Label="Remove Room" OnClick="OpenRemoveDialogAsync" />
            </MudMenu>
        </CardHeaderActions>
    </MudCardHeader>
    <MudDivider />
    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Info" Indeterminate="true" />
    }
    else if (room != null)
    {
        <MudCardContent>
            <MudGrid Class="flex-row-reverse">
                <MudItem xs="12" sm="6" md="4">
                    <div class="ratio ratio-16x9">
                        <img src="@imageUrl"
                        class="img-fluid rounded-4 border"
                        style="object-fit: cover;" />
                    </div>
                </MudItem>
                <MudItem xs="12" sm="6" md="8">
                    <MudText Typo="Typo.h5">Name:</MudText>
                    <MudText Class="mb-3" Typo="Typo.body1">@room.Name</MudText>
                    <MudText Typo="Typo.h5">Description:</MudText>
                    <MudText Typo="Typo.body1">@room.Description</MudText>
                </MudItem>
            </MudGrid>

        </MudCardContent>
    }
</MudCard>

@if (room != null)
{
    <MudCard Class="mt-3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4">Devices</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudDivider />
        @if (devices.Any())
        {
            <MudDataGrid T="DeviceResponse" Hover="true" Breakpoint="Breakpoint.Xs" Items="@devices" RowsPerPage="5" Bordered="true" RowClick="@((e) => {OnRowClicked(e.Item);})">
                <Columns>
                    <PropertyColumn Property="d => d.Name" Title="Name" />
                    <PropertyColumn Property="d => d.Type" Title="Type" />
                    <TemplateColumn T="DeviceResponse" Title="Status">
                        <CellTemplate>
                            @{
                                var online = IsDeviceOnline(context.Item);
                                var text = online ? "Online" : "Offline";
                                var color = online ? Color.Success : Color.Error;

                                <MudChip Color="@color" Size="Size.Small">@text</MudChip>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="DeviceResponse" PageSizeOptions=@(new int[] {5, 10, 20}) />
                </PagerContent>
            </MudDataGrid>
        }
        else
        {
            <MudCardContent>
                <p>No devices were found.</p>
            </MudCardContent>
        }
    </MudCard>
}

@code {
    [Parameter]
    public string RoomId { get; set; }

    private MudMenu menu = default!;

    private RoomGetResponse? room;
    private List<DeviceResponse> devices = new();

    DialogOptions dialogOptions = new DialogOptions
    {
        BackdropClick = false,
        MaxWidth = MaxWidth.ExtraSmall,
        FullWidth = true
    };

    private bool isLoading = true;

    private string imageUrl => $"{roomService.GetImageUrl(RoomId)}?no-cache={imageCacheBuster}";
    private long imageCacheBuster = DateTimeOffset.UtcNow.ToUnixTimeSeconds();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            room = await roomService.GetRoom(RoomId);
            devices = await roomService.GetDevices(RoomId);

            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task UploadFiles()
    {
        await menu.CloseMenuAsync();
        if (await roomService.SetRoomImage(RoomId, "room_image_input"))
        {
            imageCacheBuster = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OpenEditDialogAsync()
    {
        var parameters = new DialogParameters
        {
            { "Room", new RoomUpdateRequest
                {
                    Id = room.Id,
                    Name = room.Name,
                    Description = room.Description
                }
            }
        };

        var dialogReference = await DialogService.ShowAsync<EditDialog>("Edit Room", parameters, dialogOptions);
        var dialogResult = await dialogReference.Result;
        if (!dialogResult!.Canceled)
        {
            room = await roomService.GetRoom(RoomId);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OpenRemoveDialogAsync()
    {
        var parameters = new DialogParameters
        {
            { "RoomId", RoomId }
        };

        var dialogReference = await DialogService.ShowAsync<RemoveDialog>("Remove Room", parameters, dialogOptions);
        var dialogResult = await dialogReference.Result;
        if (!dialogResult!.Canceled)
        {
            navigationManager.NavigateTo("rooms");
        }
    }

    private void OnRowClicked(DeviceResponse device)
    {
        navigationManager.NavigateTo($"device/{device.Id}");
    }

    private bool IsDeviceOnline(DeviceResponse device)
    {
        if (device.LastUpdate == null) return false;
        return (DateTime.UtcNow - device.LastUpdate.Value).TotalHours <= 24;
    }
}