@inject AuthService AuthService
@inject NavigationManager NavigationManager

<Modal @ref="modal" HeaderCssClass="d-none" BodyCssClass="p-0">
	<BodyTemplate>
		<div class="modal-header">
			<div class="text-center w-100">
				<div class="auth-logo">
					<Icon Name="IconName.PersonCircle" Style="font-size: 2rem;" Class="icon-gradient"/>
				</div>
				<h1 style="font-size: 1.5rem; margin-bottom: .25rem;"><b>Account Settings</b></h1>
				<p class="mb-0" style="font-size: .875rem; opacity: .9;">Manage your password</p>
			</div>
		</div>
		<EditForm Model="editPassword" OnValidSubmit="HandleEdit">
			<DataAnnotationsValidator/>
			<div class="modal-body">
				<div class="row g-3">
					<div class="col-12">
						<label class="form-label">Current password</label>
						<PasswordInput Id="currentPassword" @bind-Value="editPassword.CurrentPassword"/>
						<ValidationMessage For="@(() => editPassword.CurrentPassword)"/>
					</div>
					<div class="col-12 col-md-6">
						<label class="form-label">Password</label>
						<PasswordInput Id="newPassword" @bind-Value="editPassword.Password"/>
						<ValidationMessage For="@(() => editPassword.Password)"/>
					</div>
					<div class="col-12 col-md-6">
						<label class="form-label">Confirm password</label>
						<PasswordInput Id="confirmNewPassword" @bind-Value="editPassword.ConfirmPassword"/>
						<ValidationMessage For="@(() => editPassword.ConfirmPassword)"/>
					</div>
				</div>
			</div>
			<div class="modal-footer d-block p-3">
				<div class="row g-3 m-0">
					<div class="col-12 col-md-6">
						<Button Type="ButtonType.Submit" Class="btn-gradient w-100" Loading="loading" LoadingText="Saving changes" Disabled="loading">Save changes</Button>
					</div>
					<div class="col-12 col-md-6">
						<Button Class="btn-gradient w-100" @onclick="@(() => modal.HideAsync())">Cancel</Button>
					</div>
				</div>
			</div>
		</EditForm>
	</BodyTemplate>
</Modal>

@code {
	private UserEditPasswordRequest editPassword = new();
	private Modal modal = default!;
	private bool loading = false;

	public async Task OnShowModalClick()
	{
		await modal.ShowAsync();
	}

	public async Task OnHideModalClick()
	{
		await modal.HideAsync();
	}

	private async Task HandleEdit()
	{
		loading = true;
		var response = await AuthService.EditPassword(editPassword);
		if (response)
		{
			await modal.HideAsync();
		}
		loading = false;
	}
}