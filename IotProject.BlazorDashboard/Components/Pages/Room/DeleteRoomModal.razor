@inject ApiService ApiService
@inject NavigationManager navigationManager

<Modal @ref="confirmRoomRemoveModal" Title="Remove room" Size="ModalSize.Regular">
    <BodyTemplate>
        @if (isRemovingRoom)
        {
            <div class="text-center my-3">
                <div class="spinner-border text-danger" role="status"></div>
                <div>Removing room...</div>
            </div>
        }
        else
        {
            <p class="fw-bold text-danger">Are you sure you want to remove this room?<br>This can not be undone!</p>
            <p class="fst-italic text-secondary m-0">Removing the room, does not remove your devices.</p>
        }
    </BodyTemplate>
    <FooterTemplate>
        <div class="row g-3 m-0 w-100">
            <div class="col-12 col-md-6">
                <Button Class="btn-danger w-100" @onclick="HandleDeleteRoom" Loading="isRemovingRoom" LoadingText="Removing Device" Disabled="isRemovingRoom">Remove</Button>
            </div>
            <div class="col-12 col-md-6">
                <Button @onclick="() => confirmRoomRemoveModal.HideAsync()" Class="btn-cancel w-100">Cancel</Button>
            </div>
        </div>
    </FooterTemplate>
</Modal>

@code {
    [Parameter] public RoomGetResponse room { get; set; }
    public Modal confirmRoomRemoveModal = default!;
    public string? roomIdToRemove;
    public bool isRemovingRoom = false;

    public async Task OnShowModalClick()
    {
        roomIdToRemove = room.Id;
        await confirmRoomRemoveModal.ShowAsync();
        await InvokeAsync(StateHasChanged);
    }

    public async Task OnHideModalClick()
    {
        await confirmRoomRemoveModal.HideAsync();
    }

    public async Task HandleDeleteRoom()
    {
        isRemovingRoom = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            if (!string.IsNullOrEmpty(roomIdToRemove))
            {
                var result = await ApiService.DeleteRoom(roomIdToRemove);

                roomIdToRemove = null;
                await confirmRoomRemoveModal.HideAsync();
                navigationManager.NavigateTo("/rooms");
            }
        }
        finally
        {
            isRemovingRoom = false;
        }
    }

}
