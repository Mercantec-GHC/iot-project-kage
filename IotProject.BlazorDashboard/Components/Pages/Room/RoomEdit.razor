@page "/rooms/edit/{Id}"
@inject RoomService roomService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime


<Card Class="rounded-top-4 overflow-hidden lighter-border shadow card-gradient">
    <Card Class="rounded-top-4 overflow-hidden">
        <CardHeader>
            <h5>Edit Room</h5>
            <div class="w-100">
                <a href="/rooms" class="position-absolute text-secondary top-0 end-0 m-2" style="text-decoration: none;">
                    <Icon Name="IconName.ArrowLeft" />
                    <span>Back</span>
                </a>
            </div>

        </CardHeader>
        <CardBody>
            @if (isLoading)
            {
                <div class="text-center my-5">
                    <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <EditForm Model="room" OnValidSubmit="HandleEditRoom">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="row align-items-stretch">
                        <!-- Left column: Input fields -->
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="room-name" class="col-form-label">Room Name:</label>
                                <InputText Id="room-name" Class="form-control" @bind-Value="room.Name" />
                                <ValidationMessage For="@(() => room.Name)" />
                            </div>
                            <div class="mb-3">
                                <label for="room-description" class="col-form-label">Room Description:</label>
                                <InputTextArea Id="room-description" Class="form-control" @bind-Value="room.Description" />
                                <ValidationMessage For="@(() => room.Description)" />
                            </div>
                        </div>
                        <!-- Divider: vertical on desktop, horizontal on mobile -->
                        <div class="d-none d-md-flex col-md-1 justify-content-center align-items-center">
                            <div style="width:2px; height:95%; background: linear-gradient(140deg, rgba(82,191,250,1) 40%, rgba(255,128,91,1) 60%);"></div>
                        </div>
                        <div class="d-md-none col-12">
                            <hr class="my-4" />
                        </div>
                        <!-- Right column: Image upload -->
                        <div class="col-md-5">
                            <div class="mb-3">
                                <label class="col-form-label fw-bold">Room Image:</label>
                                <img src="@roomService.GetImageUrl(Id)"/>
                                <InputFile id="room_image_input" class="form-control" />
                                <Button @onclick="HandleImageSave" Class="btn btn-primary">Save Image</Button>
                            </div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-gradient text-white w-100 mt-4">Save Changes</button>
                </EditForm>
            }
        </CardBody>
    </Card>
</Card>

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private RoomEditModel room = new();
    private bool isLoading = true;

    private class RoomEditModel
    {
        [Required(ErrorMessage = "Room name is required.")]
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;

            var result = await roomService.GetRoom(Id);
            if (result != null)
            {
                room = new RoomEditModel
                    {
                        Name = result.Name,
                        Description = result.Description
                    };
            }
            else
            {
                navigationManager.NavigateTo("/rooms");
            }
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleEditRoom()
    {
        var updateRequest = new RoomUpdateRequest
            {
                Id = Id,
                Name = room.Name,
                Description = room.Description
            };

        var success = await roomService.UpdateRoom(updateRequest);
        if (success)
        {
            navigationManager.NavigateTo("/rooms");
        }
    }

    public async Task HandleImageSave()
    {
        Console.WriteLine("Image has changed.");

        var uploadUrl = roomService.GetImageUploadUrl(Id);
        var fileModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/room_image.js");
        await fileModule.InvokeVoidAsync("UploadImage", uploadUrl);
    }
}
