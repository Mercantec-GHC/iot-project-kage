@page "/rooms"
@inject RoomService roomService
@inject NavigationManager navigationManager

<Button class="btn btn-gradient mb-2" @onclick="@(() => OnShowAddNewRoomModalClick())">Add New Room</Button>
<p class="text-secondary mb-3">Total rooms: @rooms.Count()</p>

@if (isLoadingRooms)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-3">
        @foreach (var room in rooms)
        {
            <div class="col h-100">
                <Card Class="card-gradient h-100 d-flex flex-column">
                    <Card Class="h-100 d-flex flex-column">
                        <Button @onclick="() => NavigateToDetails(room.Id)" Class="p-0 m-0">
                            <CardHeader Class="p-0">
                                <div class="w-100">
                                    <div class="ratio ratio-16x9">
                                        <img src="@($"{roomService.GetImageUrl(room.Id)}?no-cache={DateTimeOffset.UtcNow.ToUnixTimeSeconds()}")" onerror="this.onerror=null; this.src='images/room.jpg'" alt="Room Image" class="img-fluid w-100" style="height: 100%; object-fit: cover;" />
                                    </div>
                                    
                                </div>
                            </CardHeader>
                            <CardBody Class="flex-grow-1 d-flex flex-column">
                                <CardTitle Class="flex-grow-1 text-truncate title-clamp p-0">@room.Name</CardTitle>
                                <hr class="m-0" />
                                <CardText Class="my-1 flex-grow-1 text-truncate description-clamp">@room.Description</CardText>
                            </CardBody>
                        </Button>
                    </Card>
                </Card>
            </div>
        }
    </div>
}

<Modal @ref="addRoomModal" Title="Add Room" Size="ModalSize.Large">
    <HeaderTemplate>
        <h5 class="modal-title" id="AddRoomModalLabel">Add New Room</h5>
        <Button @onclick="() => addRoomModal.HideAsync()" Class="btn-close" />
    </HeaderTemplate>

    <BodyTemplate>
        @if (isAddingRoom)
        {
            <div class="text-center my-3">
                <div class="spinner-border text-primary" role="status"></div>
                <div>Adding room...</div>
            </div>
        }
        else
        {
            <EditForm Model="newRoom" OnValidSubmit="HandleAddNewRoom">
                @* <DataAnnotationsValidator /> *@
                @* <ValidationSummary /> *@

                <div class="mb-3">
                    <label for="room-name" class="col-form-label">Room Name:</label>
                    <InputText Id="room-name" Class="form-control" @bind-Value="newRoom.Name" />
                    @* <ValidationMessage For="@(() => newRoom.Name)" /> *@
                </div>
                <div class="mb-3">
                    <label for="room-description" class="col-form-label">Room Description:</label>
                    <InputTextArea Id="room-description" Class="form-control" @bind-Value="newRoom.Description" />
                    @* <ValidationMessage For="@(() => newRoom.Description)" /> *@
                </div>
                <button type="submit" class="btn btn-gradient w-100">Add Room</button>
            </EditForm>
        }
    </BodyTemplate>
</Modal>



@code {
    private DeleteRoomModal deleteRoomModal = default!;

    private List<RoomGetResponse> rooms = new();
    private RoomUpdateRequest? newRoom = new();
    private Modal addRoomModal = default!;
    private bool isAddingRoom = false;
    private bool isLoadingRooms = true;

    private void HandleRoomDeleted()
    {
        navigationManager.NavigateTo("/rooms");
    }

    private async Task HandleAddNewRoom()
    {
        isAddingRoom = true;
        try
        {
            var request = new RoomCreateRequest
            {
                Name = newRoom.Name,
                Description = newRoom.Description
            };
            var result = await roomService.AddRoom(request);
            if (result)
            {
                rooms = await roomService.GetAll();
                newRoom = new RoomUpdateRequest();
                await addRoomModal.HideAsync();
            }
        }
        finally
        {
            isAddingRoom = false;
        }
    }

    protected async override Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            isLoadingRooms = true;
            rooms = await roomService.GetAll();
            isLoadingRooms = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void NavigateToDetails(string id)
    {
        navigationManager.NavigateTo($"/rooms/details/{id}");
    }

    public async Task OnShowAddNewRoomModalClick()
    {
        await addRoomModal.ShowAsync();
        await InvokeAsync(StateHasChanged);
    }
}