@page "/rooms/details/{Id}"
@inject ApiService ApiService
@inject NavigationManager navigationManager

<Card Class="rounded-top-4 overflow-hidden lighter-border shadow card-gradient">
    <Card Class="rounded-top-4 overflow-hidden">
        <CardHeader Class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Room Details</h5>
            <Dropdown Class="ms-auto py-2 py-sm-0 d-none d-sm-block">
                <DropdownToggleButton Class="p-0 border-0 logo-highlight">
                    <Icon Name="IconName.Gear" /> Settings
                </DropdownToggleButton>
                <DropdownMenu Position="DropdownMenuPosition.End" Class="text-center p-0">
                    <DropdownItem @onclick="@(() => editRoomModal.OnShowEditRoomModalClick())" Type="DropdownItemType.Button">Edit</DropdownItem>
                    <DropdownDivider Class="m-0"/>
                    <DropdownItem @onclick="@(() => updateRoomImageModal.OnShowUpdateRoomImageModalClick())" Type="DropdownItemType.Button">Update Image</DropdownItem>
                    <DropdownDivider Class="m-0"/>
                    <DropdownItem @onclick="@(() => deleteRoomModal.OnShowModalClick())" Type="DropdownItemType.Button">Remove</DropdownItem>
                </DropdownMenu>
            </Dropdown>
            <DeleteRoomModal @ref="deleteRoomModal" room="room"></DeleteRoomModal>
            <EditRoomModal @ref="editRoomModal" room="room" id="@Id"></EditRoomModal>
            <UpdateRoomImageModal @ref="updateRoomImageModal" room="room" id="@Id"></UpdateRoomImageModal>
        </CardHeader>

        <CardBody>
            @if (isLoading)
            {
                <div class="text-center my-5">
                    <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="row align-items-stretch">
                    <!-- Left column: Room details -->
                    <div class="col-12 col-md-6">
                        <div class="row" style="flex-direction: row-reverse;">
                            <div class="col-12 col-md-6">
                                <div class="mb-2 overflow-hidden rounded-4 border shadow-sm ratio ratio-16x9">
                                    <img src="@imageUrl"
                                         class="img-fluid rounded-4 border"
                                         style="object-fit: cover;" />
                                </div>
                            </div>
                            <div class="col-12 col-md-6">
                                <div class="mb-3">
                                    <label class="col-form-label fw-bold mb-0 pb-0">Room Name:</label>
                                    <div class="form-control-plaintext">@room.Name</div>
                                </div>
                                <div class="mb-3">
                                    <label class="col-form-label fw-bold pb-0">Room Description:</label>
                                    <div class="form-control-plaintext">@room.Description</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Divider: vertical on desktop, horizontal on mobile -->
                    <div class="d-md-none col-12">
                        <hr class="my-4" />
                    </div>
                    <!-- Right column: Placeholder for additional info -->
                    <div class="col-12 col-md-6">
                        <div class="row h-100">
                            <div class="col-auto">
                                <div class="d-none d-md-flex col-12 col-md-2 justify-content-center align-items-center h-100" style="width: 2px;">
                                    <div style="width:2px; height:95%; background: linear-gradient(140deg, rgba(82,191,250,1) 40%, rgba(255,128,91,1) 60%);"></div>
                                </div>
                            </div>
                            <div class="col">
                                <div class="mb-3">
                                    @if (devices.Count == 0)
                                    {
                                        <div class="text-muted">No devices found.</div>
                                    }
                                    else
                                    {
                                        if (!isLoading)
                                        {
                                            <Card Class="rounded-top-4 overflow-hidden lighter-border shadow card-gradient">
                                                <Card class="rounded-top-4 overflow-hidden">
                                                    <CardHeader>
                                                        <CardTitle>Devices</CardTitle>
                                                        <CardSubTitle Class="text-secondary">Total devices: @(devices.Count)</CardSubTitle>
                                                    </CardHeader>
                                                    <CardBody>
                                                        <div class="mb-3">
                                                            <InputText @bind-Value="searchTerm" class="form-control" placeholder="Search devices..." @oninput="OnSearch" />
                                                        </div>
                                                        <ul class="list-group">
                                                            @foreach (var device in FilteredPagedDevices)
                                                            {
                                                                <li class="list-group-item position-relative hover-effect">
                                                                    <div class="d-flex justify-content-between align-items-start">
                                                                        <div>
                                                                            <strong>@device.Name</strong>
                                                                            <div class="text-muted small">Type: @device.Type</div>
                                                                        </div>
                                                                        <span class="badge rounded-pill @(IsDeviceOnline(device) ? "bg-success" : "bg-danger") mt-1">
                                                                            @(IsDeviceOnline(device) ? "Online" : "Offline")
                                                                        </span>
                                                                    </div>
                                                                    <a href="@($"device/{device.Id}")" class="stretched-link"></a>
                                                                </li>

                                                            }
                                                        </ul>
                                                    </CardBody>

                                                    <CardFooter class="d-flex justify-content-end p-3">
                                                        <Pagination ActivePageNumber="currentPage"
                                                                    TotalPages="TotalPages"
                                                                    DisplayPages="DisplayPages"
                                                                    PageChanged="OnPageChanged"
                                                                    FirstLinkIcon="IconName.ChevronDoubleLeft"
                                                                    PreviousLinkIcon="IconName.ChevronLeft"
                                                                    NextLinkIcon="IconName.ChevronRight"
                                                                    LastLinkIcon="IconName.ChevronDoubleRight" />
                                                    </CardFooter>
                                                </Card>
                                            </Card>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                        

                    </div>
                </div>

                <Button Class="btn btn-gradient text-white w-100 mt-4" @onclick="() => navigationManager.NavigateTo(RoomsPath)">
                    Back to List
                </Button>
            }
        </CardBody>
    </Card>
</Card>


@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private DeleteRoomModal deleteRoomModal = default!;
    private EditRoomModal editRoomModal = default!;
    private UpdateRoomImageModal updateRoomImageModal = default!;

    private string imageUrl => $"{ApiService.GetImageUrl(Id)}?t={imageCacheBuster}";
    private string imageCacheBuster = Guid.NewGuid().ToString();


    private RoomGetResponse? room;
    private bool isLoading = true;
    private const string RoomsPath = "/rooms";

    // Pagination configuration
    private int currentPage = 1;
    private const int PageSize = 5;
    private int DisplayPages = 5;

    // Full and filtered device lists
    private List<DeviceResponse> devices = new();
    private List<DeviceResponse> filteredDevices = new();
    private string searchTerm = "";

    // Calculate total number of pages
    private int TotalPages => (int)Math.Ceiling((double)filteredDevices.Count / PageSize);

    // Paginated and filtered device list
    private IEnumerable<DeviceResponse> FilteredPagedDevices =>
        filteredDevices.Skip((currentPage - 1) * PageSize).Take(PageSize);

    // Event handler when user changes page
    private async Task OnPageChanged(int newPage)
    {
        currentPage = newPage;
        await InvokeAsync(StateHasChanged);
    }

    // Event handler for responsive screen resizing (affects number of visible pagination links)
    [JSInvokable]
    public void OnResize(string breakpoint)
    {
        DisplayPages = breakpoint switch
        {
            "xs" => 1,
            "sm" => 3,
            _ => 5
        };
        StateHasChanged();
    }

    // Search handler with automatic pagination reset
    private void OnSearch(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        filteredDevices = devices.Where(d =>
            d.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true ||
            d.Type.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            d.RoomId?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true
        ).ToList();
        currentPage = 1;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            room = await ApiService.GetRoom(Id);
            devices = await ApiService.GetDevices(Id);
            filteredDevices = devices.ToList();

            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    // Check if a device is online based on last update time
    private bool IsDeviceOnline(DeviceResponse device)
    {
        if (device.LastUpdate == null) return false;
        return (DateTime.UtcNow - device.LastUpdate.Value).TotalHours <= 24;
    }
}