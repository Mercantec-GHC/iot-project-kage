@inject ApiService ApiService
@inject NavigationManager navigationManager

<Modal @ref="updateRoomImageModal" Title="Update Image" Size="ModalSize.Regular">
    <HeaderTemplate>
        <h5 class="modal-title" id="UpdateRoomImageModadlLabel">Update Image</h5>
    </HeaderTemplate>

    <BodyTemplate>
        @if (isLoading)
        {
            <div class="text-center my-3">
                <div class="spinner-border text-danger" role="status"></div>
                <div>Loading...</div>
            </div>
        }
        else
        {
            <div class="d-flex flex-column align-items-start">
                <div class="mb-2 overflow-hidden rounded-4 border shadow-sm ratio ratio-16x9">
                    <img src="@imageUrl"
                    class="img-fluid rounded-4 border"
                    style="object-fit: cover;" />
                </div>
                <div class="input-group mb-2">
                    <InputFile id="room_image_input" class="form-control form-control-sm" style="height: 32px;" />
                </div>
                @if (isImageUploaded)
                {
                    <div class="text-center m-0 w-100" style="color:limegreen">
                        <p class="m-0"><b>Image was uploaded!</b></p>
                        <p>You can now close this window.</p>
                    </div>
                }
                <div class="w-100 mt-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <Button @onclick="async () => await updateRoomImageModal.HideAsync()"
                                Class="btn btn-secondary py-1 px-3"
                                style="min-width: 120px; height: 32px;">
                            <span class="fw-semibold" style="font-size: 0.98rem;">Close</span>
                        </Button>
                        <Button @onclick="HandleImageSave"
                                Class="btn btn-gradient py-1 px-3 d-flex align-items-center"
                                style="min-width: 120px; height: 32px;">
                            <i class="bi bi-upload me-1"></i>
                            <span class="fw-semibold" style="font-size: 0.98rem;">Upload Image</span>
                        </Button>
                    </div>
                </div>
            </div>
        }
    </BodyTemplate>
</Modal>

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Parameter] public RoomGetResponse room { get; set; }
    public Modal updateRoomImageModal = default!;
    public bool isLoading = true;
    public bool isImageUploaded = false;
    public string roomIdToEdit;

    private string imageUrl => $"{ApiService.GetImageUrl(Id)}?t={imageCacheBuster}";
    private string imageCacheBuster = Guid.NewGuid().ToString();


    public async Task HandleImageSave()
    {
        if (await ApiService.SetRoomImage(Id, "room_image_input"))
        {
            isImageUploaded = true;
            imageCacheBuster = Guid.NewGuid().ToString();
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task OnShowUpdateRoomImageModalClick()
    {
        isImageUploaded = false;
        isLoading = true;
        roomIdToEdit = room.Id;
        await updateRoomImageModal.ShowAsync();
        await InvokeAsync(StateHasChanged);
        isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;

            var result = await ApiService.GetRoom(Id);

            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
