@page "/devices"
@using System.Timers
@implements IDisposable
@inject IotDeviceService DeviceService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<div class="row justify-content-center">
    <div class="col-12">
        <Card Class="rounded-top-4 overflow-hidden lighter-border shadow card-gradient">
            <Card class="rounded-top-4 overflow-hidden">
                
                <CardHeader class="text-center p-3">
                    <h2 class="mb-0">List Of Devices</h2>
                    <h6 class="text-secondary">Total devices: @(devices.Count)</h6>
                </CardHeader>   
                <CardBody class="">
                    @if (isLoading)
                    {
                        // Loading spinner shown while fetching devices
                        <div class="d-flex justify-content-center align-items-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        // Search input for filtering devices
                        <div class="mb-3">
                            <InputText @bind-Value="searchTerm" class="form-control" placeholder="Search devices..." @oninput="OnSearch" />
                        </div>
                        // List of devices with their details
                        <ul class="list-group">
                            @foreach (var device in FilteredPagedDevices)
                            {
                                <li class="list-group-item shadow-sm d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-2 hover-effect">
                                    <div class="w-100">
                                        <span class="fw-bold fs-5 d-inline-block" style="max-width: 300px;">@device.Name</span>
                                        <div class="d-flex flex-column">
                                            <small class="text-muted">Type: @device.Type</small>
                                        </div>
                                    </div>
                                    <div class="d-flex align-items-center gap-2">
                                        <span class="badge @(IsDeviceOnline(device) ? "bg-success" : "bg-danger")">
                                            @(IsDeviceOnline(device) ? "Online" : "Offline")
                                        </span>
                                        <a href="@($"device/{device.Id}")" class="stretched-link"></a>
                                    </div>
                                </li>
                            }
                        </ul>
                    }
                </CardBody>

                @if (!isLoading)
                {
                    <CardFooter class="d-flex justify-content-end p-3">
                        <Pagination Class="" ActivePageNumber="currentPage"
                        TotalPages="TotalPages"
                        DisplayPages="DisplayPages"
                        PageChanged="OnPageChanged"
                        FirstLinkIcon="IconName.ChevronDoubleLeft"
                        PreviousLinkIcon="IconName.ChevronLeft"
                        NextLinkIcon="IconName.ChevronRight"
                        LastLinkIcon="IconName.ChevronDoubleRight" />
                    </CardFooter>
                }
            </Card>
        </Card>
    </div>
</div>

@code {
    // State variables for device management
    private List<DeviceResponse> devices = new();
    private List<DeviceResponse> filteredDevices = new();
    private string searchTerm = "";
    private int currentPage = 1;
    private const int PageSize = 5;
    private int DisplayPages = 1;
    private bool isLoading = true;
    private Timer? refreshTimer;
    private DotNetObjectReference<DeviceList>? objRef;

    // Initialize the page and load devices
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Setup responsive breakpoints
            var breakpointsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/breakpoints.js");
            await breakpointsModule.InvokeVoidAsync("onResize", DotNetObjectReference.Create(this));
            var breakpoint = await breakpointsModule.InvokeAsync<string>("getBootstrapBreakpoint");
            OnResize(breakpoint);

            // Initialize refresh timer
            refreshTimer = new Timer(3000); // 3 seconds
            refreshTimer.Elapsed += OnTimerElapsed;
            refreshTimer.AutoReset = true;
            refreshTimer.Start();

            // Load all devices
            await RefreshDevices();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        _ = InvokeAsync(async () =>
        {
            await RefreshDevices();
            StateHasChanged();
        });
    }

    private async Task RefreshDevices()
    {
        try
        {
            var newDevices = await DeviceService.GetAllDevices();
            
            // Only update if there are actual changes
            if (!AreDeviceListsEqual(devices, newDevices))
            {
                devices = newDevices;
                OnSearch(new ChangeEventArgs { Value = searchTerm });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing devices: {ex}");
        }
    }

    private bool AreDeviceListsEqual(List<DeviceResponse> list1, List<DeviceResponse> list2)
    {
        if (list1.Count != list2.Count) return false;
        
        return list1.All(device1 => 
            list2.Any(device2 => 
                device2.Id == device1.Id && 
                device2.Name == device1.Name && 
                device2.Type == device1.Type && 
                device2.RoomId == device1.RoomId &&
                device2.LastUpdate == device1.LastUpdate));
    }

    public void Dispose()
    {
        refreshTimer?.Stop();
        refreshTimer?.Dispose();
        objRef?.Dispose();
    }

    // Handle search input and filter devices (Searching while typing)
    private void OnSearch(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        filteredDevices = devices.Where(d => 
            d.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true ||
            d.Type.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            d.RoomId?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true
        ).ToList();
        currentPage = 1;
        StateHasChanged();
    }

    // Check if a device is online based on last update time
    private bool IsDeviceOnline(DeviceResponse device)
    {
        if (device.LastUpdate == null) return false;
        return (DateTime.UtcNow - device.LastUpdate.Value).TotalHours <= 24;
    }

    // Handle responsive breakpoint changes
    [JSInvokable]
    public void OnResize(string breakpoint)
    {
        DisplayPages = breakpoint switch
        {
            "xs" => 1,
            "sm" => 3,
            _ => 5
        };
        StateHasChanged();
    }

    // Calculate total number of pages for pagination
    private int TotalPages => (int)Math.Ceiling((double)filteredDevices.Count / PageSize);

    // Get current page of devices
    private IEnumerable<DeviceResponse> FilteredPagedDevices =>
        filteredDevices.Skip((currentPage - 1) * PageSize).Take(PageSize);

    // Handle page changes in pagination
    private async Task OnPageChanged(int newPage)
    {
        currentPage = newPage;
        await InvokeAsync(StateHasChanged);
    }
}