@page "/devices_backup"
@using IotProject.RazorShared.Models.Devices
@using IotProject.RazorShared.Models.Sensors
@using IotProject.RazorShared.Services
@using BlazorBootstrap
@inject IDeviceService DeviceService
@inject IJSRuntime JSRuntime

    <div class="row justify-content-center">
        <div class="col-12">
            <Card class="card-gradient shadow-lg border-0 rounded-top-4" style="border-radius: 12px;">
                <CardHeader class="text-center text-white fw-bold overflow-hidden rounded-top-3"
                style="background: rgba(2, 7, 49, 0.9);">
                    <h2 class="mb-0">List Of Devices</h2>
                </CardHeader>

                <CardBody class="bg-dark">
                    <ul class="list-group">
                        @foreach (var device in PagedDevices)
                        {
                            <li class="list-group-item bg-dark text-light shadow-sm d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-2">
                                <div class="w-100">
                                    <span class="fw-bold fs-5 text-truncate d-block">@device.Name</span>
                                    <small class="text-muted">Room: @device.Data</small>
                                </div>
                            </li>
                        }
                    </ul>
                </CardBody>

                <CardFooter class="d-flex justify-content-end" style="background: rgba(2, 7, 49, 0.9); border-radius: 0 0 12px 12px;">
                    <Pagination Class="" ActivePageNumber="currentPage"
                    TotalPages="TotalPages"
                    DisplayPages="DisplayPages"
                    PageChanged="OnPageChanged"
                    FirstLinkIcon="IconName.ChevronDoubleLeft"
                    PreviousLinkIcon="IconName.ChevronLeft"
                    NextLinkIcon="IconName.ChevronRight"
                    LastLinkIcon="IconName.ChevronDoubleRight" />
                </CardFooter>
            </Card>
        </div>
    </div>

@code {
    private List<IotDevice> devices = new();
    private int currentPage = 1;
    private const int PageSize = 5;
    private int DisplayPages = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var breakpointsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/breakpoints.js");
            await breakpointsModule.InvokeVoidAsync("onResize", DotNetObjectReference.Create(this));
            var breakpoint = await breakpointsModule.InvokeAsync<string>("getBootstrapBreakpoint");
            OnResize(breakpoint);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        devices = DeviceService.GetDevices();

        while (devices.Count < 30)
        {
            devices.Add(new DemoIotDevice($"Demo Device {devices.Count + 1}"));
        }
		StateHasChanged();
    }

	[JSInvokable]
    public void OnResize(string breakpoint)
	{
        DisplayPages = breakpoint switch
        {
            "xs" => 1,
            "sm" => 3,
            _ => 5
        };
        StateHasChanged();
	}



	private int TotalPages => (int)Math.Ceiling((double)devices.Count / PageSize);

    private IEnumerable<IotDevice> PagedDevices =>
        devices.Skip((currentPage - 1) * PageSize).Take(PageSize);

    private async Task OnPageChanged(int newPage)
    {
        currentPage = newPage;
        await InvokeAsync(StateHasChanged);
    }

    private class DemoIotDevice : IotDevice
    {
        public DemoIotDevice(string name) : base(name)
        {
            Name = name;
            Data = "Demo Data";
        }

        public override List<IotSensor> GetSensors()
        {
            return new List<IotSensor>
            {
                new IotSensor { Name = "Demo Sensor 1", Device = this },
                new IotSensor { Name = "Demo Sensor 2", Device = this }
            };
        }
    }
}