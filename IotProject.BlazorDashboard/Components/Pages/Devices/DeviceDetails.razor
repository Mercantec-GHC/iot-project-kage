@page "/device/{DeviceId}"
@using System.Timers
@implements IDisposable
@inject IotDeviceService DeviceService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<div class="row justify-content-center">
    <div class="col-12">
        <Card Class="rounded-top-4 overflow-hidden lighter-border shadow card-gradient">
            <Card class="rounded-top-4 overflow-hidden">
                <CardHeader class="text-center p-4">
                    <div class="d-flex align-items-center justify-content-between">
                        <h2 class="mb-0">Device Details</h2>
                        <a href="/devices" class="d-flex align-items-center text-secondary" style="text-decoration: none;">
                            <Icon Name="IconName.ArrowLeft" />
                            <span class="ms-1">Back to Devices</span>
                        </a>
                    </div>
                </CardHeader>


                <CardBody class="p-4">
                    @if (isLoading)
                    {
                        @* Loading spinner shown while fetching device data *@
                        <div class="d-flex justify-content-center align-items-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (device != null)
                    {
                        @* Device information section with two cards *@
                        <div class="row mb-4 g-4">
                            <div class="col col-md-6">
                                <div class="card shadow-sm h-100">
                                    <div class="card-header">
                                        <h5 class="card-title mb-0">
                                            <i class="bi bi-info-circle me-2"></i>Device Information
                                        </h5>
                                        <Dropdown Class="py-2 py-sm-0 d-none d-sm-block">
                                            <DropdownToggleButton Class="p-0 border-0 logo-highlight">
                                                <Icon Name="IconName.Gear" /> Edit
                                            </DropdownToggleButton>
                                            <DropdownMenu Position="DropdownMenuPosition.End">
                                                <EditDeviceDetails @ref="editDeviceDetails" DeviceId="DeviceId" EditName="true"/>
                                                <DropdownItem Type="DropdownItemType.Button" @onclick="@(() => editDeviceDetails.OnShowModalClick())"><Icon Name="IconName.Pencil" /> Edit name</DropdownItem>
                                                <DropdownDivider />
                                                <EditDeviceDetails @ref="editDeviceDetails" DeviceId="DeviceId" EditRoom="true"/>
                                                <DropdownItem Type="DropdownItemType.Button" @onclick="@(() => editDeviceDetails.OnShowModalClick())"><Icon Name="IconName.BuildingFillGear" /> Edit room</DropdownItem>
                                            </DropdownMenu>
                                        </Dropdown>
                                        @* <Button @onclick="@(() => editDeviceDetails.OnShowModalClick())">Edit</Button>
                                        <EditDeviceDetails @ref="editDeviceDetails" DeviceId="DeviceId"/> *@
                                    </div>
                                    <div class="card-body">
                                        <dl class="row mb-0">
                                            <dt class="col-sm-4 text-muted">Name</dt>
                                            <dd class="col-sm-8 fw-bold">@device.Name</dd>

                                            <dt class="col-sm-4 text-muted">Type</dt>
                                            <dd class="col-sm-8">@device.Type</dd>

                                            <dt class="col-sm-4 text-muted">Room</dt>
                                            <dd class="col-sm-8">
                                                <span class="badge bg-primary">@(device.RoomId ?? "Not assigned")</span>
                                            </dd>

                                            <dt class="col-sm-4 text-muted">Last Update</dt>
                                            <dd class="col-sm-8">
                                                @if (device.LastUpdate.HasValue)
                                                {
                                                    <span class="text-success">
                                                        <i class="bi bi-clock-history me-1"></i>
                                                        @dateString
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Never</span>
                                                }
                                            </dd>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col col-md-6">
                                <div class="card shadow-sm h-100">
                                    <div class="card-header">
                                        <h5 class="card-title mb-0">
                                            <i class="bi bi-graph-up me-2"></i>Latest Data
                                        </h5>
                                    </div>
                                    <div class="card-body">
                                        @if (device.Data != null && device.Data.Any())
                                        {
                                            <dl class="row mb-0">
                                                @foreach (var item in device.Data)
                                                {
                                                    <dt class="col-sm-4 text-muted">@item.Key</dt>
                                                    <dd class="col-sm-8">
                                                        <span class="badge bg-info text-dark">@item.Value</span>
                                                    </dd>
                                                }
                                            </dl>
                                        }
                                        else
                                        {
                                            <div class="text-center py-4">
                                                <i class="bi bi-database-slash text-muted" style="font-size: 2rem;"></i>
                                                <p class="text-muted mt-2 mb-0">No data available</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            @* Widgets section for future device-specific widgets *@
                            <div class="col-12">
                                <div class="card shadow-sm overflow-hidden">
                                    <div class="card-header">
                                        <h5 class="card-title mb-0">
                                            <i class="bi bi-grid-3x3-gap me-2"></i>Widgets
                                        </h5>
                                    </div>
                                    <div class="card-body bg-secondary-subtle">

                                        <WidgetProvider Device="device">
                                            <ProviderTemplate Class="row row-cols-2 g-3">
                                                <div class="col">
                                                    <ProviderContent Class="card"
                                                        HeaderClass="card-header"
                                                        BodyClass="" />
                                                </div>
                                            </ProviderTemplate>
                                        </WidgetProvider>

                                        @* <div class="row g-4">
                                            <div class="col-12 col-md-6">
                                                <div class="card h-100 border-0">
                                                    <div class="card-body">
                                                        <h6 class="card-subtitle mb-3 text-muted">
                                                            <i class="bi bi-box me-2"></i>Widget 1
                                                        </h6>
                                                        <div class="text-center py-4">
                                                            <i class="bi bi-plus-circle text-muted" style="font-size: 2rem;"></i>
                                                            <p class="text-muted mt-2 mb-0">Widget content will be added here</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-md-6">
                                                <div class="card h-100 border-0">
                                                    <div class="card-body">
                                                        <h6 class="card-subtitle mb-3 text-muted">
                                                            <i class="bi bi-box me-2"></i>Widget 2
                                                        </h6>
                                                        <div class="text-center py-4">
                                                            <i class="bi bi-plus-circle text-muted" style="font-size: 2rem;"></i>
                                                            <p class="text-muted mt-2 mb-0">Widget content will be added here</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div> *@
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        @* Error message when device is not found *@
                        <div class="alert alert-warning d-flex align-items-center" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            <div>Device not found</div>
                        </div>
                    }
                </CardBody>
            </Card>
        </Card>
    </div>
</div>

@code {
    // Route parameter for device ID
    [Parameter]
    public string DeviceId { get; set; }

    // State variables
    private DeviceResponse? device;
    private bool isLoading = true;
    private Timer? refreshTimer;
    private string dateString { get; set; }

    private EditDeviceDetails editDeviceDetails = default!;

    // Initialize the page and load device data
    protected override async Task OnInitializedAsync()
    {
        try 
        {
            // Initialize refresh timer
            refreshTimer = new Timer(3000); // 3 seconds
            refreshTimer.Elapsed += OnTimerElapsed;
            refreshTimer.AutoReset = true;
            refreshTimer.Start();

            await RefreshDevice();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ConvertTime()
    {
        long milliseconds = new DateTimeOffset(device.LastUpdate.Value).ToUnixTimeMilliseconds();
        Console.WriteLine(device.LastUpdate.Value.ToString());
        var timeModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/time.js");
        dateString = await timeModule.InvokeAsync<string>("convertUTCToLocal", milliseconds);
        Console.WriteLine(dateString);
    }

    private void OnTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        _ = InvokeAsync(async () =>
        {
            await RefreshDevice();
            StateHasChanged();
        });
    }

    private async Task RefreshDevice()
    {
        try
        {
            var newDevice = await DeviceService.GetDevice(DeviceId);
            // Only update if there are actual changes
            if (newDevice != null && (device == null || !AreDevicesEqual(device, newDevice)))
            {
                device = newDevice;
                await ConvertTime();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing device: {ex}");
        }
    }

    private bool AreDevicesEqual(DeviceResponse device1, DeviceResponse device2)
    {
        return device1.Id == device2.Id &&
               device1.Name == device2.Name &&
               device1.Type == device2.Type &&
               device1.RoomId == device2.RoomId &&
               device1.LastUpdate == device2.LastUpdate &&
               AreDataEqual(device1.Data, device2.Data);
    }

    private bool AreDataEqual(Dictionary<string, object>? data1, Dictionary<string, object>? data2)
    {
        if (data1 == null && data2 == null) return true;
        if (data1 == null || data2 == null) return false;
        if (data1.Count != data2.Count) return false;

        return data1.All(kvp => data2.TryGetValue(kvp.Key, out var value) && 
            (value == null && kvp.Value == null || value?.ToString() == kvp.Value?.ToString()));
    }

    public void Dispose()
    {
        refreshTimer?.Stop();
        refreshTimer?.Dispose();
    }
} 