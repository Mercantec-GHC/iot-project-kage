@inject ApiService ApiService
@inject NavigationManager NavigationManager

<Modal @ref="modal" Title="Remove device" BodyCssClass="p-0">
	<BodyTemplate>
		<EditForm Model="@removeDevice" OnValidSubmit="HandleDelete">
			<div class="modal-body">
				<div class="row g-3">
					<div class="col-12">
						<p class="fw-bold text-danger">Are you sure you want to remove your device?<br>This can not be undone!</p>
						<p class="fst-italic text-secondary m-0">To reconnect the device, it needs to be reset.</p>
					</div>
				</div>
			</div>
			<div class="modal-footer d-block p-3">
				<div class="row g-3 m-0">
					<div class="col-12 col-md-6">
						<Button Type="ButtonType.Submit" Class="btn-danger w-100" Loading="loading" LoadingText="Removing Device" Disabled="loading">Remove</Button>
					</div>
					<div class="col-12 col-md-6">
						<Button Class="btn-gradient w-100" @onclick="@(() => modal.HideAsync())">Cancel</Button>
					</div>
				</div>
			</div>
		</EditForm>
	</BodyTemplate>
</Modal>

@code {
	[Parameter]
	public DeviceResponse Device { get; set; }

	private Modal modal = default!;
	private DeviceRemoveRequest removeDevice = new();
	private bool loading = false;

	public async Task OnShowModalClick()
	{
		await modal.ShowAsync();
	}

	public async Task OnHideModalClick()
	{
		await modal.HideAsync();
	}

	private async Task HandleDelete()
	{
		loading = true;
		removeDevice.Id = Device.Id;
		var response = await ApiService.DeleteDevice(removeDevice);
		if (response)
		{
			await modal.HideAsync();
			NavigationManager.NavigateTo("/devices");
		}
	}
}